package com.kh.graph;







public class Graph {
/*
 * 
 * [그래프]
 * 	- 일련의 정점 (node, vertex, 꼭짓점) 집합 v와 간선(edge, 변) 집합 E로 구성된 자료구조의 일종
 * 	- 일반적으로 정점엔 데이터, 간선엔 정점과 정잠 사이의 관계 정보가 포함되어 있다.
 * 	- 만약 간선에 가중치가 존재할 시 가중치 그래프 라고 불리게 된다.
 * 	- 그래프는 방향이 있고 없고에 따라서 다음과 같이 나뉘게 된다.
 * 	 	유향 그래프 / 무향 그래프(양방향)
 * 
 * [그래프의 구성요소]
 * 	- 정점 (Vertex / Node) : 그래프에서 위치를 나타냄
 * 	- 간선 (Edge / Link / Branch) : 그래프에서 위치간의 관계를 나타냄. 각 정점들을 연결하는 선을 의미.
 * 	- 인접 정점 (Adjacennt Vertex) : 간선에 의해 직접 연결된 정점을 의미.
 * 	- G(V, E) : 그래프는 정점과 간선의 집합. 즉, 그래프 자체를 의미
 * 
 * [그래프 예시]
 * 
 * [] : 정점(v1) / 정점 사이 간선(e1)
 * [V1] ------e1-------[V2]------e3-------[V4]
 * 						l
 * 		[V3]-----e2-----l
 * 		  l
 * 		  l
 * 		 e4
 * 		  l
 *        l
 * 		[V5]
 * 
 * 

 * 
 * 
 * 
 * [인접 행렬]
 * 위의 그래프를 인접행렬로 표현할 시에 다음과 같이 표현된다.
 *  	V1	V2	V3	V4	V5
 *  V1	0	1	0	0	0
 * 	V2	1	0	1	1	0
 * 	V3	0	1	0	0	1
 * 	V4	0	1	0	0	0
 * 	V5	0	0	1	0	0
 *  
 * 이 자료구조는 2중배열을 사용하면 되는데 인접리스트에 비해 쉽지만 인접리스트보다 느릴 수 있다.
 * 인접 노드를 찾기 위해선 모든 노드를 순회해야함.
 * (공간복잡도 O(V^2))
 * 
 * [인접 리스트]
 * [V1]--[V2]
 * [V2]--[V1]--[V3]--[V4]
 * [V3]--[V2]--[V5]
 * [V4]--[V2]
 * 
 * 위의 그래프를 인접리스트로 표현했을 때이다.
 * V개의 리스트에 간선(E)만큼 원소가 들어 있음
 * 그로 인해 인접 노드를 쉽게 찾을 수 있음
 * (공간복잡도 O(V+E))
 * 
 * 
 * 
 * 인접리스트의 경우 실제로 연결되어 있는 정점(V)만 리스트에 담으면 되지만, 인접행렬의 경우 실제로
 * 연결되어 있지 않아도 배열에 담아야 하기 때문에 인접리스트가 더 빠를 가능성이 크다.
 * 
 * 즉, 인접행렬은 무조건 배열 길이 끝까지 읽어야 하지만 인접리스트는 최악일 경우 배열 끝까지 읽겠지만
 * 최선일 경우 하나만 읽을 수도 있다는 것이다.
 * 
 */
	
	
}
